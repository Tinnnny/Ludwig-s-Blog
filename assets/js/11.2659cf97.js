(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{216:function(t,s,r){"use strict";r.r(s);var a=r(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"spring注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring注解"}},[t._v("#")]),t._v(" Spring注解")]),t._v(" "),r("h3",{attrs:{id:"data"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[t._v("#")]),t._v(" "),r("code",[t._v("@data")])]),t._v(" "),r("p",[t._v("引入lombok依赖，就可以免去getter和setter。")]),t._v(" "),r("h3",{attrs:{id:"repository"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[t._v("#")]),t._v(" "),r("code",[t._v("@Repository")])]),t._v(" "),r("p",[t._v("用于对 DAO 实现类进行注解")]),t._v(" "),r("h3",{attrs:{id:"service"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[t._v("#")]),t._v(" "),r("code",[t._v("@Service")])]),t._v(" "),r("p",[t._v("用于对 Service 实现类进行注解")]),t._v(" "),r("h3",{attrs:{id:"controller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[t._v("#")]),t._v(" "),r("code",[t._v("@Controller")])]),t._v(" "),r("p",[t._v("用于对 Controller 实现类进行注解")]),t._v(" "),r("h3",{attrs:{id:"component"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[t._v("#")]),t._v(" "),r("code",[t._v("@Component")])]),t._v(" "),r("p",[t._v("需要注入但是不是以上三种就用这个注解。")]),t._v(" "),r("h3",{attrs:{id:"runwith"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#runwith"}},[t._v("#")]),t._v(" "),r("code",[t._v("@Runwith")])]),t._v(" "),r("p",[t._v("@RunWith就是一个运行器")]),t._v(" "),r("p",[t._v("@RunWith(JUnit4.class)就是指用JUnit4来运行")]),t._v(" "),r("p",[t._v("@RunWith(SpringJUnit4ClassRunner.class),让测试运行于Spring测试环境")]),t._v(" "),r("p",[t._v("@RunWith(Suite.class)的话就是一套测试集合，")]),t._v(" "),r("p",[t._v("@RunWith(SpringJUnit4ClassRunner.class)使用了Spring的SpringJUnit4ClassRunner，以便在测试开始的时候自动创建Spring的应用上下文。其他的想创建spring容器的话，就得用web.xml配置classloader。 注解了@RunWith就可以直接使用spring容器，直接使用@Test注解，不用启动spring容器")]),t._v(" "),r("h3",{attrs:{id:"springboottest-classes-hellospringbootapplication-class"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboottest-classes-hellospringbootapplication-class"}},[t._v("#")]),t._v(" "),r("code",[t._v("@SpringBootTest(classes=HelloSpringBootApplication.class)")])]),t._v(" "),r("p",[t._v("@SpringBootTest注解是SpringBoot自1.4.0版本开始引入的一个用于测试的注解。其中，classes属性指定启动类，SpringBootTest.WebEnvironment.RANDOM_PORT经常和测试类中@LocalServerPort一起在注入属性时使用。会随机生成一个端口号。\n也是为了能识别application.yml的配置。")])])}),[],!1,null,null,null);s.default=e.exports}}]);